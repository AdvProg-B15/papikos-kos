services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: papikos-kos:latest
    ports:
      - '8080:8080' # Map container port 8080 to host port 8080
    networks:
      - papikos-network
    environment: # <-- Add this section
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB} # Use service name 'postgres' as hostname
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update # Or validate, create, create-drop depending on your needs

      # RabbitMQ Configuration (if needed by your app at startup)
      SPRING_RABBITMQ_HOST: rabbitmq # Use service name 'rabbitmq' as hostname
      SPRING_RABBITMQ_PORT: 5672 # Default RabbitMQ port
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}

      # Optional: Specify active profiles if needed
      # SPRING_PROFILES_ACTIVE: staging

    depends_on: # <-- Add this to ensure dependencies start first
      - postgres
      - rabbitmq
    # Optional: Add healthchecks for more robust startup dependency management
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"] # Requires Spring Boot Actuator
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 60s # Give the app time to start before checking

  postgres:
    image: 'postgres:17'
    # env_file: - '.env' # Keep this if you prefer loading from .env
    environment:
      # These are read by the postgres image on first run to initialize
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    ports:
      - "5432:5432" # Map container port 5432 to host port 5432 (optional, for host access)
    networks:
      - papikos-network
    volumes: # Add a volume to persist data
      - postgres_data:/var/lib/postgresql/data
    healthcheck: # Add a basic healthcheck for postgres
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: 'rabbitmq:4-management' # Use management image to get UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"   # Map AMQP port (optional, for host access)
      - "15672:15672" # Map Management UI port (useful for debugging)
    networks:
      - papikos-network
    volumes: # Add a volume to persist data
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck: # Add a basic healthcheck for rabbitmq
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  papikos-network:
    driver: bridge

volumes: # Declare the volumes
  postgres_data:
  rabbitmq_data:
